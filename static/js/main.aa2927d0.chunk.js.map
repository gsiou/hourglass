{"version":3,"sources":["Landing.js","Calendar.js","App.js","serviceWorker.js","index.js"],"names":["goToPage","window","location","href","Landing","_useState","useState","Date","_useState2","Object","slicedToArray","bday","setBday","_useState3","_useState4","lifespan","setLifespan","react_default","a","createElement","className","onClick","id","onChange","e","target","value","type","max","es","localStorage","setItem","JSON","stringify","Math","floor","getTime","to","Week","props","concat","past","Counter","count","Calendar","mode","setMode","today","parseInt","getItem","weeksAlive","weeksLeft","calendarContent","Calendar_Counter","i","push","Calendar_Week","App","path","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAGMA,EAAY,WACdC,OAAOC,SAASC,KAAO,UAGZC,EAAA,WAAM,IAAAC,EACKC,mBAAS,IAAIC,KAAK,IADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACZM,EADYH,EAAA,GACNI,EADMJ,EAAA,GAAAK,EAEaP,mBAAS,IAFtBQ,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEZE,EAFYD,EAAA,GAEFE,EAFEF,EAAA,GASnB,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,UAAQE,QAASrB,EAAUoB,UAAU,aAAYH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAEhEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYE,GAAG,SAC1BL,EAAAC,EAAAC,cAAA,0BACgBF,EAAAC,EAAAC,cAAA,SAAOI,SAAU,SAACC,GAAD,OAAOZ,EAAQY,EAAEC,OAAOC,QAAQA,MAAOf,EAAMgB,KAAK,UAEnFV,EAAAC,EAAAC,cAAA,6CACmCF,EAAAC,EAAAC,cAAA,SAAOI,SAAU,SAACC,GAAD,OAAOR,EAAYQ,EAAEC,OAAOC,QAAQA,MAAOX,EAAUY,KAAK,SAASC,IAAK,OAE5HX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMR,QAnBF,WACZS,aAAaC,QAAQ,OAAQC,KAAKC,UAAUC,KAAKC,MAAM,IAAI5B,KAAKI,GAAMyB,UAAU,OAChFN,aAAaC,QAAQ,WAAYC,KAAKC,UAAqB,IAAXlB,EAAiB,GAAK,GAAK,MAiB7CsB,GAAG,WAAWjB,UAAU,QAA9C,QAA0DH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qCCxBhFkB,EAAO,SAACC,GAAD,OACXtB,EAAAC,EAAAC,cAAA,QAAMC,UAAS,WAAAoB,OAAaD,EAAME,KAAO,SAAW,UAApD,MAKIC,EAAU,SAACH,GAAD,OACdtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACbmB,EAAMI,MADT,MAKaC,EAAA,WAUb,IAVmB,IAAAvC,EACKC,mBAAS,GADdE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACZwC,EADYrC,EAAA,GACNsC,EADMtC,EAAA,GAGbuC,GAAQ,IAAIxC,MAAO6B,UAAY,IAC/BzB,EAAOqC,SAASlB,aAAamB,QAAQ,SAGrCC,GAAcH,EAAQpC,GAAQ,GAAK,GAAK,GAAK,EAC7CwC,GAAaxC,EAHFqC,SAASlB,aAAamB,QAAQ,aAGVF,GAAS,GAAK,GAAK,GAAK,EACvDK,EAAkB,CAACnC,EAAAC,EAAAC,cAACkC,EAAD,CAASV,MAAO,KACjCW,EAAI,EAAGA,EAAIJ,EAAaC,EAAWG,IACzCF,EAAgBG,KAAKtC,EAAAC,EAAAC,cAACqC,EAAD,CAAMf,KAAMa,EAAIJ,MAChCI,EAAI,GAAK,IAAM,IAClBF,EAAgBG,KAAKtC,EAAAC,EAAAC,cAAA,YACrBiC,EAAgBG,KAAKtC,EAAAC,EAAAC,cAACkC,EAAD,CAASV,MAAOT,KAAKC,MAAMmB,EAAE,GAAK,OAG3D,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAoB,OAAc,IAATK,EAAa,SAAU,IAAM1C,KAAK,IAAIkB,QAAS,SAACG,GAAD,OAAOsB,EAAQ,KAA/E,UACA7B,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAoB,OAAc,IAATK,EAAa,SAAU,IAAM1C,KAAK,IAAIkB,QAAS,SAACG,GAAD,OAAOsB,EAAQ,KAA/E,cACA7B,EAAAC,EAAAC,cAAA,KAAGC,UAAS,OAAAoB,OAAkB,IAATK,EAAa,SAAU,IAAM1C,KAAK,IAAIkB,QAAS,SAACG,GAAD,OAAOsB,EAAQ,KAAnF,gBAEF7B,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,SAAZ,KAAkDc,KAAKC,MAAMe,GAA7D,eAAqFjC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,QAArF,KAA4Hc,KAAKC,MAAMgB,IACvIlC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAoB,OAAwB,IAATK,EAAa,MAAiB,IAATA,EAAa,MAAQ,KACpEO,KChCMK,EAPH,kBACVxC,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACf,EAAD,CAASsD,KAAK,MACdzC,EAAAC,EAAAC,cAACyB,EAAD,CAAUc,KAAK,gBCGCC,QACW,cAA7B1D,OAAOC,SAAS0D,UAEe,UAA7B3D,OAAOC,SAAS0D,UAEhB3D,OAAOC,SAAS0D,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aa2927d0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Link } from \"@reach/router\"\n\nconst goToPage  = () => {\n    window.location.href = '#start'\n}\n\nexport default () => {\n  const [bday, setBday] = useState(new Date(0));\n  const [lifespan, setLifespan] = useState(80);\n\n  const store = () => {\n    localStorage.setItem('bday', JSON.stringify(Math.floor(new Date(bday).getTime()/1000)));\n    localStorage.setItem('lifespan', JSON.stringify(lifespan * 365 * 24 * 60 * 60));\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>H o u r g l a s s</h1>\n        <button onClick={goToPage} className='Hourglass'><i className='far fa-hourglass'></i></button>\n      </header>\n      <div className=\"Frontpage\" id=\"start\">\n          <p>\n            I was born on <input onChange={(e) => setBday(e.target.value)} value={bday} type=\"date\"/>\n          </p>\n          <p>\n            I believe I'll die at the age of <input onChange={(e) => setLifespan(e.target.value)} value={lifespan} type=\"number\" max={120}/>\n          </p>\n          <div className=\"Action\">\n            <Link onClick={store} to=\"calendar\" className=\"Next\">Next <span className=\"fas fa-long-arrow-alt-right\"/></Link>\n          </div>\n        </div>\n    </div>\n  );\n}","import React, { useState } from 'react'\n\nconst goToPage  = () => {\n    window.location.href = '#start'\n}\n\nconst Week = (props) => (\n  <span className={`Weekbox ${props.past ? 'filled' : 'empty'}`}>\n    x\n  </span>\n)\n\nconst Counter = (props) => (\n  <span className='Counter'>\n    {props.count}:\n  </span>\n)\n\nexport default () => {\n  const [mode, setMode] = useState(0);\n\n  const today = new Date().getTime() / 1000;\n  const bday = parseInt(localStorage.getItem('bday'));\n  const lifespan = parseInt(localStorage.getItem('lifespan'));\n\n  const weeksAlive = (today - bday) / 60 / 60 / 24 / 7;\n  const weeksLeft = (bday + lifespan - today) / 60 / 60 / 24 / 7;\n  const calendarContent = [<Counter count={0}/>]\n  for(let i = 0; i < weeksAlive + weeksLeft; i++) {\n    calendarContent.push(<Week past={i < weeksAlive}/>)\n    if ((i + 1) % 52 == 0) {\n      calendarContent.push(<br/>)\n      calendarContent.push(<Counter count={Math.floor(i/52 + 1)}/>)\n    }\n  }\n  return (\n    <div className=\"App\">\n      <div className='ModeSelector'>\n        <a className={`${mode === 0 ? 'active': ''}`} href=\"#\" onClick={(e) => setMode(0)}>Normal</a>\n        <a className={`${mode === 1 ? 'active': ''}`} href=\"#\" onClick={(e) => setMode(1)}>Optimistic</a>\n        <a className={`pes ${mode === 2 ? 'active': ''}`} href=\"#\" onClick={(e) => setMode(2)}>Pessimistic</a>\n      </div>\n      <p>Weekend Calendar</p>\n      <p>Weekends <span className='past'>alive</span>: {Math.floor(weeksAlive)} | Weekends <span className='future'>left</span>: {Math.floor(weeksLeft)}</p>\n      <div className={`Calendar ${ mode === 1 ? 'opt' : mode === 2 ? 'pes' : ''}`}>\n        {calendarContent}\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Landing from './Landing.js';\nimport Calendar from './Calendar.js';\nimport { Router } from \"@reach/router\"\n\nconst App = () => (\n  <Router>\n    <Landing path=\"/\" />\n    <Calendar path=\"/calendar\" />\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}